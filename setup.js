#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Duckduki - Script de Configura√ß√£o\n');

// Verificar Node.js version
const nodeVersion = process.version;
const requiredVersion = 18;
const currentVersion = parseInt(nodeVersion.substring(1).split('.')[0]);

if (currentVersion < requiredVersion) {
  console.error(`‚ùå Node.js ${requiredVersion}+ √© necess√°rio. Vers√£o atual: ${nodeVersion}`);
  process.exit(1);
}

console.log(`‚úÖ Node.js ${nodeVersion} - OK\n`);

// Verificar depend√™ncias
console.log('üì¶ Verificando depend√™ncias...');

try {
  // Verificar se package.json existe
  if (!fs.existsSync('package.json')) {
    console.error('‚ùå package.json n√£o encontrado. Execute este script na pasta do projeto.');
    process.exit(1);
  }

  // Verificar se node_modules existe
  if (!fs.existsSync('node_modules')) {
    console.log('üì¶ Instalando depend√™ncias...');
    execSync('npm install', { stdio: 'inherit' });
  } else {
    console.log('‚úÖ Depend√™ncias j√° instaladas');
  }

  console.log('\nüõ†Ô∏è Verificando estrutura do projeto...');

  // Criar pastas necess√°rias se n√£o existirem
  const folders = [
    'src/main',
    'src/renderer/widgets',
    'src/renderer/settings',
    'assets',
    'dist'
  ];

  folders.forEach(folder => {
    if (!fs.existsSync(folder)) {
      fs.mkdirSync(folder, { recursive: true });
      console.log(`üìÅ Criada pasta: ${folder}`);
    }
  });

  // Verificar se √≠cone existe
  if (!fs.existsSync('assets/icon.png')) {
    console.log('\n‚ö†Ô∏è  AVISO: √çcone n√£o encontrado em assets/icon.png');
    console.log('   Para funcionar corretamente, adicione um √≠cone PNG 256x256px');
    console.log('   Voc√™ pode criar um em: https://www.favicon.cc/\n');
  }

  console.log('‚úÖ Estrutura do projeto verificada\n');

  // Verificar TypeScript
  try {
    execSync('npx tsc --version', { stdio: 'pipe' });
    console.log('‚úÖ TypeScript configurado');
  } catch (error) {
    console.log('‚ö†Ô∏è  TypeScript n√£o encontrado, mas ser√° instalado via depend√™ncias');
  }

  // Verificar Electron
  try {
    execSync('npx electron --version', { stdio: 'pipe' });
    console.log('‚úÖ Electron configurado');
  } catch (error) {
    console.log('‚ö†Ô∏è  Electron n√£o encontrado, mas ser√° instalado via depend√™ncias');
  }

  console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!\n');

  console.log('üìã Pr√≥ximos passos:');
  console.log('   1. Obtenha sua chave API Groq em: https://console.groq.com');
  console.log('   2. Execute: npm run dev');
  console.log('   3. Configure a chave Groq no aplicativo');
  console.log('   4. Teste um comando: "Hello, teste de conex√£o"\n');

  console.log('üîß Comandos √∫teis:');
  console.log('   npm run dev          - Iniciar desenvolvimento');
  console.log('   npm run build        - Build de produ√ß√£o');
  console.log('   npm run dist         - Gerar execut√°vel');
  console.log('   npm start            - Executar vers√£o compilada\n');

  console.log('üìñ Documenta√ß√£o completa no README.md\n');

  // Verificar se pode executar o projeto
  console.log('üß™ Testando configura√ß√£o...');
  
  try {
    execSync('npm run build:main', { stdio: 'pipe' });
    console.log('‚úÖ Build do processo principal - OK');
  } catch (error) {
    console.log('‚ö†Ô∏è  Build do processo principal com problemas');
    console.log('   Execute: npm run dev:main para mais detalhes');
  }

  try {
    execSync('npm run build:renderer', { stdio: 'pipe' });
    console.log('‚úÖ Build da interface - OK');
  } catch (error) {
    console.log('‚ö†Ô∏è  Build da interface com problemas');
    console.log('   Execute: npm run dev:renderer para mais detalhes');
  }

  console.log('\nüéä Duckduki est√° pronto para usar!');
  console.log('   Execute: npm run dev para come√ßar\n');

} catch (error) {
  console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
  console.log('\nüîß Solu√ß√µes:');
  console.log('   1. Certifique-se que est√° na pasta correta do projeto');
  console.log('   2. Execute: npm install');
  console.log('   3. Verifique sua conex√£o com a internet');
  console.log('   4. Tente executar: npm cache clean --force');
  process.exit(1);
}

// Fun√ß√£o helper para verificar comandos
function commandExists(command) {
  try {
    execSync(`which ${command}`, { stdio: 'pipe' });
    return true;
  } catch (error) {
    return false;
  }
} 